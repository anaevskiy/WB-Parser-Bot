from aiogram.dispatcher import FSMContext
from loader import dp, logger
from aiogram.types import Message, InputFile
from keyboards import get_info_markup, cancel_markup
from utils import get_addr, Wildberries, form_excel
from filters import IsNumber


@dp.message_handler(commands=['start'], state='*')
async def start_command(message: Message, state: FSMContext):
    await state.reset_state()
    text = '''
–ü—Ä–∏–≤–µ—Çü•≥ –Ø –±–æ—Ç-–ø–∞—Ä—Å–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–π–¥–µ—Ç –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ 
—Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ WB –≤ excel –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∏ 
–≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–πüòä –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ"
    '''
    await message.answer(text, reply_markup=get_info_markup)


@dp.message_handler(text='‚ÑπÔ∏è–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ')
async def get_info(message: Message, state: FSMContext):
    user_id, username = message.from_user.id, message.from_user.username
    logger.debug(f"ID: {user_id} ; Username: @{username} ; Text: –ù–∞–∂–∞–ª –Ω–∞ \"–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ\"")
    await state.set_state('wait_geo')
    await message.answer('–ü—Ä–∏—à–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –∏–¥—Ç–∏ –ø–æ–∏—Å–∫', reply_markup=cancel_markup)


@dp.message_handler(text='üìõ–û—Ç–º–µ–Ω–∞', state='*')
async def cancel(message: Message, state: FSMContext):
    await state.reset_state()
    await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=get_info_markup)


@dp.message_handler(content_types=['location'], state='wait_geo')
async def get_location(message: Message, state: FSMContext):
    user_id, username = message.from_user.id, message.from_user.username
    latitude, longitude = message.location.latitude, message.location.longitude
    logger.debug(
        f"ID: {user_id} ; Username: @{username} ; Text: –ü—Ä–∏—Å–ª–∞–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}  {longitude}")

    addr_object = get_addr(latitude, longitude)
    if addr_object:
        addr = addr_object[0]['value']
        await state.update_data(latitude=latitude, longitude=longitude, addr=addr)
        await state.set_state('wait_product')
        await message.answer('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=cancel_markup)
    else:
        await state.reset_state()
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', reply_markup=get_info_markup)


@dp.message_handler(state='wait_product')
async def get_product(message: Message, state: FSMContext):
    user_id, username = message.from_user.id, message.from_user.username
    logger.debug(
        f"ID: {user_id} ; Username: @{username} ; Text: –í–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {message.text}")

    await state.update_data(product=message.text)
    await state.set_state('wait_max_items')
    await message.answer('–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤', reply_markup=cancel_markup)


@dp.message_handler(IsNumber(), state='wait_max_items')
async def get_max_items(message: Message, state: FSMContext):
    user_id, username = message.from_user.id, message.from_user.username
    logger.debug(
        f"ID: {user_id} ; Username: @{username} ; Text: –í–≤–µ–ª –º–∞–∫—Å. —á–∏—Å–ª–æ —Ç–æ–≤–∞—Ä–æ–≤: {message.text}")

    data = await state.get_data()
    wb = Wildberries(data['latitude'], data['longitude'], data['addr'], data['product'], int(message.text))
    await state.reset_state()
    result = await wb.get_geo_info()
    if result is None:
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö —Å WB! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
            reply_markup=get_info_markup)
        return
    await wb.get_items()
    if len(wb.items) == 0:
        await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!', reply_markup=get_info_markup)
    else:
        buffer_data = form_excel(wb.items)
        document = InputFile(buffer_data, filename='table.xlsx')
        await message.answer_document(document, caption='–ì–æ—Ç–æ–≤–æ! –õ–æ–≤–∏ –¥–æ–∫—É–º–µ–Ω—Ç)', reply_markup=get_info_markup)

